# Задача №49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна
# Ввод:
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод:
# 2.5 10
import math
orbits = [(1, 3), (2.5, 10), (7, 7), (6, 6), (4, 3)]
def find_farthest_orbit(orbit):    
    list_s = [[orbit[i][j] for j in range(2)] for i in range(len(orbit))if orbit[i][0] != orbit[i][1]]
    min_s = 0.0
    max_s = []       
    for i in range(len(list_s)):
            if round(math.pi*(list_s[i][0] * list_s[i][1]), 2) > min_s:
                 max_s= (list_s[i][0],list_s[i][1]) #.append([list_s[i][0],list_s[i][1]]) 
                 min_s = round(math.pi*(list_s[i][0] * list_s[i][1]), 2)
                
    return max_s

print(find_farthest_orbit(orbits))

