# Задача №49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна
# Ввод:
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод:
# 2.5 10
def find_farthest_orbit(orbit):

    s = orbit[(0)(0)] * orbit[(0)(1)] * 3.1415
    return s
from functools import reduce
d = reduce(lambda x,y: x+y,map(lambda x:x+x,filter(lambda x: (x>=2), (1,2,3,4)))) 
print(d)
def func(a):
    return a+a
x = map(func, [(1, 2),(2, 3),(2, 4),(5, 6)]) # x - это объект типа map
print(x)
print(list(x))
orbits = [[1, 3], [2.5, 10], [7, 2], [6, 6], [4, 3]]
def find_farthest_orbit(orbit):
 #   for i in (rows):
  #      for j in (colums)
  #      s = orbit[i][j] * orbit[i][j]
    return 

print(find_farthest_orbit(orbits))